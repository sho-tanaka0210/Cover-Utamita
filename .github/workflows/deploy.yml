name: Utamita CI/CD

on:
  push:
    paths-ignore:
      - README.md
      - .gitignore
  workflow_dispatch:

env:
  IMAGE: gcr.io/${{ secrets.PROJECT_ID }}/utamita:${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'

      - name: Build
        run: go build

      - name: Test
        run: go test ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
            name: golang-build
            path: ./cover-utamita

  image-build:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}    
    name: image-build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build a docker image
        run: docker build -t ${{ env.IMAGE }} -f Dockerfile_prd .

      - name: gcloud auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_API_KEY }}'

      - name: Authenticate Docker to Artifact Registry
        run: |
          gcloud auth configure-docker --quiet

      - run: docker push ${{ env.IMAGE }}

  deploy:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [test, image-build]
    name: deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: golang-build
          path: cover-utamita

      - name: gcloud auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_API_KEY }}'

      - name: Deploy to CloudFunctions
        uses: 'google-github-actions/deploy-cloud-functions@v3'
        timeout-minutes: 10
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          region: 'asia-northeast1'
          name: 'utamita-bot'
          runtime: 'go122'
          docker_repository: ${{ env.IMAGE }}
          cpu: 1
          memory: 128Mi
          max_instance_count: 1
          min_instance_count: 0
          secrets: |-
            BOT_TOKEN=${{ secrets.BOT_TOKEN }}
            CLIENT_ID=${{ secrets.CLIENT_ID }}
            CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
            YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}
          service_timeout: '120s'
          event_trigger_retry: false
